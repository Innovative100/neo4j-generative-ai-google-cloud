{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many java developers attend more than one universities?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_EDUCATION]->(e1:Education), (p)-[:HAS_EDUCATION]->(e2:Education) WHERE toLower(s.name) CONTAINS 'java' AND e1.university <> e2.university RETURN COUNT(DISTINCT p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where are most of pythonistas located?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) MATCH (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(s.name) CONTAINS 'python' WITH pos.location as location, COUNT(p) as num_pythonistas ORDER BY num_pythonistas DESC LIMIT 1 RETURN location, num_pythonistas"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Who went to most number of universities?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WITH p, COUNT(e.university) as num_universities ORDER BY num_universities DESC LIMIT 1 RETURN p, num_universities"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Do I have any expert on mainframes?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'mainframes' AND toLower(s.level) CONTAINS 'expert' RETURN COUNT(p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many are knowledgable on all of - java, python, javascript, security?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE (toLower(s.name) CONTAINS 'java' OR toLower(s.name) CONTAINS 'python' OR toLower(s.name) CONTAINS 'javascript' OR toLower(s.name) CONTAINS 'security') WITH p, COUNT(s) AS skill_count WHERE skill_count = 4 RETURN COUNT(p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where do most of them work at?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) RETURN c.name, COUNT(p) AS num_people ORDER BY num_people DESC LIMIT 1"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where did most of them study?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) RETURN e.university, COUNT(p) AS num_people ORDER BY num_people DESC LIMIT 1"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where does most marketing managers work?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'marketing manager' RETURN c.name, COUNT(p) AS num_people ORDER BY num_people DESC LIMIT 1"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Do I have anyone with expertise on Java and Cyber security?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s1:Skill), (p)-[:HAS_SKILL]->(s2:Skill) WHERE toLower(s1.name) CONTAINS 'java' AND toLower(s2.name) CONTAINS 'cyber security' RETURN p"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many Texas-based experts do I have on Java?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) MATCH (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(s.name) CONTAINS 'java' AND toLower(s.level) CONTAINS 'expert' AND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Which data scientist is based out of Texas?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'data scientist' AND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN p"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:I have to fill 10 Front end roles. Who are all I have based on ideal skillsets for a front end role?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) IN ['html', 'css', 'javascript', 'react', 'angular', 'vue'] WITH p, COUNT(s) AS skill_count ORDER BY skill_count DESC LIMIT 10 RETURN p"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Which skill is popular among people with bachelor degrees?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education), (p)-[:HAS_SKILL]->(s:Skill) WHERE toLower(e.degree) CONTAINS 'bachelor' WITH s, COUNT(p) AS person_count ORDER BY person_count DESC LIMIT 1 RETURN s.name, person_count"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a degree in computer science from Stanford University?", "output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'computer science' AND toLower(e.university) CONTAINS 'stanford' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree as 'computer science' and university as 'stanford'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a software engineer at Google?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'software engineer' AND toLower(c.name) CONTAINS 'google' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'software engineer' and company name as 'google'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of intermediate in Python?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'python' AND toLower(s.level) CONTAINS 'intermediate' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'python' and skill level as 'intermediate'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have held a position in New York City?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.location) CONTAINS 'new york city' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has location as a property. 3. We search for the position location as 'new york city'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a master's degree in data science?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'master' AND toLower(e.degree) CONTAINS 'data science' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'master' and 'data science'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a data analyst at Facebook?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'data analyst' AND toLower(c.name) CONTAINS 'facebook' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'data analyst' and company name as 'facebook'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of beginner in JavaScript?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'javascript' AND toLower(s.level) CONTAINS 'beginner' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'javascript' and skill level as 'beginner'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a bachelor's degree in electrical engineering?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.degree) CONTAINS 'electrical engineering' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'bachelor' and 'electrical engineering'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a project manager in London?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'project manager' AND toLower(pos.location) CONTAINS 'london' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has title and location as properties. 3. We search for the position title as 'project manager' and position location as 'london'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a PhD in physics from MIT?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'phd' AND toLower(e.degree) CONTAINS 'physics' AND toLower(e.university) CONTAINS 'mit' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree containing both 'phd' and 'physics' and university as 'mit'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a degree in Computer Science from Stanford University?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'computer science' AND toLower(e.university) CONTAINS 'stanford university' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree as 'computer science' and university as 'stanford university'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Software Engineer at Google?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'software engineer' AND toLower(c.name) CONTAINS 'google' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'software engineer' and company name as 'google'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of 'intermediate' in Python?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'python' AND toLower(s.level) CONTAINS 'intermediate' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'python' and skill level as 'intermediate'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a Master's degree in Data Science?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'master' AND toLower(e.degree) CONTAINS 'data science' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'master' and 'data science'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Data Analyst in New York?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'data analyst' AND toLower(pos.location) CONTAINS 'new york' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has title and location as properties. 3. We search for the position title as 'data analyst' and location as 'new york'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a PhD in Physics from MIT?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'phd' AND toLower(e.degree) CONTAINS 'physics' AND toLower(e.university) CONTAINS 'mit' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree containing both 'phd' and 'physics' and university as 'mit'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Product Manager at Amazon?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'product manager' AND toLower(c.name) CONTAINS 'amazon' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'product manager' and company name as 'amazon'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of 'beginner' in JavaScript?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'javascript' AND toLower(s.level) CONTAINS 'beginner' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'javascript' and skill level as 'beginner'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a Bachelor's degree in Mathematics?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.degree) CONTAINS 'mathematics' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'bachelor' and 'mathematics'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Data Scientist in San Francisco?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'data scientist' AND toLower(pos.location) CONTAINS 'san francisco' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has title and location as properties. 3. We search for the position title as 'data scientist' and location as 'san francisco'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many java developers attend more than one universities?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_EDUCATION]->(e1:Education), (p)-[:HAS_EDUCATION]->(e2:Education) WHERE toLower(s.name) CONTAINS 'java' AND e1.university <> e2.university RETURN COUNT(DISTINCT p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where are most of pythonistas located?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) MATCH (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(s.name) CONTAINS 'python' WITH pos.location as location, COUNT(p) as num_pythonistas ORDER BY num_pythonistas DESC LIMIT 1 RETURN location, num_pythonistas"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Who went to most number of universities?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WITH p, COUNT(e.university) as num_universities ORDER BY num_universities DESC LIMIT 1 RETURN p, num_universities"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Do I have any expert on mainframes?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'mainframes' AND toLower(s.level) CONTAINS 'expert' RETURN COUNT(p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many are knowledgable on all of - java, python, javascript, security?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE (toLower(s.name) CONTAINS 'java' OR toLower(s.name) CONTAINS 'python' OR toLower(s.name) CONTAINS 'javascript' OR toLower(s.name) CONTAINS 'security') WITH p, COUNT(s) AS skill_count WHERE skill_count = 4 RETURN COUNT(p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where do most of them work at?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) RETURN c.name, COUNT(p) AS num_people ORDER BY num_people DESC LIMIT 1"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where did most of them study?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) RETURN e.university, COUNT(p) AS num_people ORDER BY num_people DESC LIMIT 1"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where does most marketing managers work?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'marketing manager' RETURN c.name, COUNT(p) AS num_people ORDER BY num_people DESC LIMIT 1"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Do I have anyone with expertise on Java and Cyber security?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s1:Skill), (p)-[:HAS_SKILL]->(s2:Skill) WHERE toLower(s1.name) CONTAINS 'java' AND toLower(s2.name) CONTAINS 'cyber security' RETURN p"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many Texas-based experts do I have on Java?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) MATCH (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(s.name) CONTAINS 'java' AND toLower(s.level) CONTAINS 'expert' AND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Which data scientist is based out of Texas?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'data scientist' AND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN p"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:I have to fill 10 Front end roles. Who are all I have based on ideal skillsets for a front end role?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) IN ['html', 'css', 'javascript', 'react', 'angular', 'vue'] WITH p, COUNT(s) AS skill_count ORDER BY skill_count DESC LIMIT 10 RETURN p"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Which skill is popular among people with bachelor degrees?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education), (p)-[:HAS_SKILL]->(s:Skill) WHERE toLower(e.degree) CONTAINS 'bachelor' WITH s, COUNT(p) AS person_count ORDER BY person_count DESC LIMIT 1 RETURN s.name, person_count"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a degree in computer science from Stanford University?", "output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'computer science' AND toLower(e.university) CONTAINS 'stanford' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree as 'computer science' and university as 'stanford'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a software engineer at Google?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'software engineer' AND toLower(c.name) CONTAINS 'google' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'software engineer' and company name as 'google'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of intermediate in Python?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'python' AND toLower(s.level) CONTAINS 'intermediate' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'python' and skill level as 'intermediate'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have held a position in New York City?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.location) CONTAINS 'new york city' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has location as a property. 3. We search for the position location as 'new york city'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a master's degree in data science?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'master' AND toLower(e.degree) CONTAINS 'data science' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'master' and 'data science'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a data analyst at Facebook?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'data analyst' AND toLower(c.name) CONTAINS 'facebook' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'data analyst' and company name as 'facebook'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of beginner in JavaScript?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'javascript' AND toLower(s.level) CONTAINS 'beginner' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'javascript' and skill level as 'beginner'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a bachelor's degree in electrical engineering?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.degree) CONTAINS 'electrical engineering' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'bachelor' and 'electrical engineering'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a project manager in London?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'project manager' AND toLower(pos.location) CONTAINS 'london' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has title and location as properties. 3. We search for the position title as 'project manager' and position location as 'london'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a PhD in physics from MIT?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'phd' AND toLower(e.degree) CONTAINS 'physics' AND toLower(e.university) CONTAINS 'mit' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree containing both 'phd' and 'physics' and university as 'mit'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a degree in Computer Science from Stanford University?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'computer science' AND toLower(e.university) CONTAINS 'stanford university' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree as 'computer science' and university as 'stanford university'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Software Engineer at Google?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'software engineer' AND toLower(c.name) CONTAINS 'google' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'software engineer' and company name as 'google'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of 'intermediate' in Python?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'python' AND toLower(s.level) CONTAINS 'intermediate' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'python' and skill level as 'intermediate'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a Master's degree in Data Science?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'master' AND toLower(e.degree) CONTAINS 'data science' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'master' and 'data science'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Data Analyst in New York?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'data analyst' AND toLower(pos.location) CONTAINS 'new york' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has title and location as properties. 3. We search for the position title as 'data analyst' and location as 'new york'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a PhD in Physics from MIT?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'phd' AND toLower(e.degree) CONTAINS 'physics' AND toLower(e.university) CONTAINS 'mit' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree containing both 'phd' and 'physics' and university as 'mit'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Product Manager at Amazon?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'product manager' AND toLower(c.name) CONTAINS 'amazon' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'product manager' and company name as 'amazon'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of 'beginner' in JavaScript?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'javascript' AND toLower(s.level) CONTAINS 'beginner' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'javascript' and skill level as 'beginner'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a Bachelor's degree in Mathematics?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.degree) CONTAINS 'mathematics' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'bachelor' and 'mathematics'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Data Scientist in San Francisco?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'data scientist' AND toLower(pos.location) CONTAINS 'san francisco' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has title and location as properties. 3. We search for the position title as 'data scientist' and location as 'san francisco'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many java developers attend more than one universities?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_EDUCATION]->(e1:Education), (p)-[:HAS_EDUCATION]->(e2:Education) WHERE toLower(s.name) CONTAINS 'java' AND e1.university <> e2.university RETURN COUNT(DISTINCT p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where are most of pythonistas located?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) MATCH (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(s.name) CONTAINS 'python' WITH pos.location as location, COUNT(p) as num_pythonistas ORDER BY num_pythonistas DESC LIMIT 1 RETURN location, num_pythonistas"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Who went to most number of universities?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WITH p, COUNT(e.university) as num_universities ORDER BY num_universities DESC LIMIT 1 RETURN p, num_universities"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Do I have any expert on mainframes?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'mainframes' AND toLower(s.level) CONTAINS 'expert' RETURN COUNT(p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many are knowledgable on all of - java, python, javascript, security?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE (toLower(s.name) CONTAINS 'java' OR toLower(s.name) CONTAINS 'python' OR toLower(s.name) CONTAINS 'javascript' OR toLower(s.name) CONTAINS 'security') WITH p, COUNT(s) AS skill_count WHERE skill_count = 4 RETURN COUNT(p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where do most of them work at?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) RETURN c.name, COUNT(p) AS num_people ORDER BY num_people DESC LIMIT 1"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where did most of them study?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) RETURN e.university, COUNT(p) AS num_people ORDER BY num_people DESC LIMIT 1"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where does most marketing managers work?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'marketing manager' RETURN c.name, COUNT(p) AS num_people ORDER BY num_people DESC LIMIT 1"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Do I have anyone with expertise on Java and Cyber security?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s1:Skill), (p)-[:HAS_SKILL]->(s2:Skill) WHERE toLower(s1.name) CONTAINS 'java' AND toLower(s2.name) CONTAINS 'cyber security' RETURN p"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many Texas-based experts do I have on Java?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) MATCH (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(s.name) CONTAINS 'java' AND toLower(s.level) CONTAINS 'expert' AND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Which data scientist is based out of Texas?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'data scientist' AND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN p"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:I have to fill 10 Front end roles. Who are all I have based on ideal skillsets for a front end role?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) IN ['html', 'css', 'javascript', 'react', 'angular', 'vue'] WITH p, COUNT(s) AS skill_count ORDER BY skill_count DESC LIMIT 10 RETURN p"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Which skill is popular among people with bachelor degrees?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education), (p)-[:HAS_SKILL]->(s:Skill) WHERE toLower(e.degree) CONTAINS 'bachelor' WITH s, COUNT(p) AS person_count ORDER BY person_count DESC LIMIT 1 RETURN s.name, person_count"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a degree in computer science from Stanford University?", "output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'computer science' AND toLower(e.university) CONTAINS 'stanford' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree as 'computer science' and university as 'stanford'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a software engineer at Google?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'software engineer' AND toLower(c.name) CONTAINS 'google' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'software engineer' and company name as 'google'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of intermediate in Python?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'python' AND toLower(s.level) CONTAINS 'intermediate' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'python' and skill level as 'intermediate'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have held a position in New York City?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.location) CONTAINS 'new york city' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has location as a property. 3. We search for the position location as 'new york city'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a master's degree in data science?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'master' AND toLower(e.degree) CONTAINS 'data science' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'master' and 'data science'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a data analyst at Facebook?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'data analyst' AND toLower(c.name) CONTAINS 'facebook' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'data analyst' and company name as 'facebook'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of beginner in JavaScript?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'javascript' AND toLower(s.level) CONTAINS 'beginner' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'javascript' and skill level as 'beginner'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a bachelor's degree in electrical engineering?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.degree) CONTAINS 'electrical engineering' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'bachelor' and 'electrical engineering'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a project manager in London?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'project manager' AND toLower(pos.location) CONTAINS 'london' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has title and location as properties. 3. We search for the position title as 'project manager' and position location as 'london'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a PhD in physics from MIT?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'phd' AND toLower(e.degree) CONTAINS 'physics' AND toLower(e.university) CONTAINS 'mit' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree containing both 'phd' and 'physics' and university as 'mit'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a degree in Computer Science from Stanford University?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'computer science' AND toLower(e.university) CONTAINS 'stanford university' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree as 'computer science' and university as 'stanford university'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Software Engineer at Google?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'software engineer' AND toLower(c.name) CONTAINS 'google' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'software engineer' and company name as 'google'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of 'intermediate' in Python?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'python' AND toLower(s.level) CONTAINS 'intermediate' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'python' and skill level as 'intermediate'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a Master's degree in Data Science?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'master' AND toLower(e.degree) CONTAINS 'data science' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'master' and 'data science'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Data Analyst in New York?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'data analyst' AND toLower(pos.location) CONTAINS 'new york' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has title and location as properties. 3. We search for the position title as 'data analyst' and location as 'new york'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a PhD in Physics from MIT?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'phd' AND toLower(e.degree) CONTAINS 'physics' AND toLower(e.university) CONTAINS 'mit' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree containing both 'phd' and 'physics' and university as 'mit'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Product Manager at Amazon?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'product manager' AND toLower(c.name) CONTAINS 'amazon' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'product manager' and company name as 'amazon'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of 'beginner' in JavaScript?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'javascript' AND toLower(s.level) CONTAINS 'beginner' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'javascript' and skill level as 'beginner'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a Bachelor's degree in Mathematics?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.degree) CONTAINS 'mathematics' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'bachelor' and 'mathematics'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Data Scientist in San Francisco?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'data scientist' AND toLower(pos.location) CONTAINS 'san francisco' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has title and location as properties. 3. We search for the position title as 'data scientist' and location as 'san francisco'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many java developers attend more than one universities?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_EDUCATION]->(e1:Education), (p)-[:HAS_EDUCATION]->(e2:Education) WHERE toLower(s.name) CONTAINS 'java' AND e1.university <> e2.university RETURN COUNT(DISTINCT p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where are most of pythonistas located?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) MATCH (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(s.name) CONTAINS 'python' WITH pos.location as location, COUNT(p) as num_pythonistas ORDER BY num_pythonistas DESC LIMIT 1 RETURN location, num_pythonistas"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Who went to most number of universities?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WITH p, COUNT(e.university) as num_universities ORDER BY num_universities DESC LIMIT 1 RETURN p, num_universities"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Do I have any expert on mainframes?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'mainframes' AND toLower(s.level) CONTAINS 'expert' RETURN COUNT(p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many are knowledgable on all of - java, python, javascript, security?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE (toLower(s.name) CONTAINS 'java' OR toLower(s.name) CONTAINS 'python' OR toLower(s.name) CONTAINS 'javascript' OR toLower(s.name) CONTAINS 'security') WITH p, COUNT(s) AS skill_count WHERE skill_count = 4 RETURN COUNT(p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where do most of them work at?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) RETURN c.name, COUNT(p) AS num_people ORDER BY num_people DESC LIMIT 1"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where did most of them study?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) RETURN e.university, COUNT(p) AS num_people ORDER BY num_people DESC LIMIT 1"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where does most marketing managers work?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'marketing manager' RETURN c.name, COUNT(p) AS num_people ORDER BY num_people DESC LIMIT 1"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Do I have anyone with expertise on Java and Cyber security?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s1:Skill), (p)-[:HAS_SKILL]->(s2:Skill) WHERE toLower(s1.name) CONTAINS 'java' AND toLower(s2.name) CONTAINS 'cyber security' RETURN p"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many Texas-based experts do I have on Java?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) MATCH (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(s.name) CONTAINS 'java' AND toLower(s.level) CONTAINS 'expert' AND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Which data scientist is based out of Texas?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'data scientist' AND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN p"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:I have to fill 10 Front end roles. Who are all I have based on ideal skillsets for a front end role?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) IN ['html', 'css', 'javascript', 'react', 'angular', 'vue'] WITH p, COUNT(s) AS skill_count ORDER BY skill_count DESC LIMIT 10 RETURN p"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Which skill is popular among people with bachelor degrees?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education), (p)-[:HAS_SKILL]->(s:Skill) WHERE toLower(e.degree) CONTAINS 'bachelor' WITH s, COUNT(p) AS person_count ORDER BY person_count DESC LIMIT 1 RETURN s.name, person_count"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a degree in computer science from Stanford University?", "output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'computer science' AND toLower(e.university) CONTAINS 'stanford' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree as 'computer science' and university as 'stanford'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a software engineer at Google?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'software engineer' AND toLower(c.name) CONTAINS 'google' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'software engineer' and company name as 'google'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of intermediate in Python?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'python' AND toLower(s.level) CONTAINS 'intermediate' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'python' and skill level as 'intermediate'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have held a position in New York City?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.location) CONTAINS 'new york city' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has location as a property. 3. We search for the position location as 'new york city'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a master's degree in data science?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'master' AND toLower(e.degree) CONTAINS 'data science' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'master' and 'data science'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a data analyst at Facebook?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'data analyst' AND toLower(c.name) CONTAINS 'facebook' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'data analyst' and company name as 'facebook'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of beginner in JavaScript?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'javascript' AND toLower(s.level) CONTAINS 'beginner' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'javascript' and skill level as 'beginner'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a bachelor's degree in electrical engineering?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.degree) CONTAINS 'electrical engineering' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'bachelor' and 'electrical engineering'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a project manager in London?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'project manager' AND toLower(pos.location) CONTAINS 'london' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has title and location as properties. 3. We search for the position title as 'project manager' and position location as 'london'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a PhD in physics from MIT?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'phd' AND toLower(e.degree) CONTAINS 'physics' AND toLower(e.university) CONTAINS 'mit' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree containing both 'phd' and 'physics' and university as 'mit'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a degree in Computer Science from Stanford University?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'computer science' AND toLower(e.university) CONTAINS 'stanford university' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree as 'computer science' and university as 'stanford university'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Software Engineer at Google?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'software engineer' AND toLower(c.name) CONTAINS 'google' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'software engineer' and company name as 'google'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of 'intermediate' in Python?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'python' AND toLower(s.level) CONTAINS 'intermediate' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'python' and skill level as 'intermediate'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a Master's degree in Data Science?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'master' AND toLower(e.degree) CONTAINS 'data science' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'master' and 'data science'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Data Analyst in New York?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'data analyst' AND toLower(pos.location) CONTAINS 'new york' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has title and location as properties. 3. We search for the position title as 'data analyst' and location as 'new york'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a PhD in Physics from MIT?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'phd' AND toLower(e.degree) CONTAINS 'physics' AND toLower(e.university) CONTAINS 'mit' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree containing both 'phd' and 'physics' and university as 'mit'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Product Manager at Amazon?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'product manager' AND toLower(c.name) CONTAINS 'amazon' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'product manager' and company name as 'amazon'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of 'beginner' in JavaScript?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'javascript' AND toLower(s.level) CONTAINS 'beginner' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'javascript' and skill level as 'beginner'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a Bachelor's degree in Mathematics?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.degree) CONTAINS 'mathematics' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'bachelor' and 'mathematics'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Data Scientist in San Francisco?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'data scientist' AND toLower(pos.location) CONTAINS 'san francisco' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has title and location as properties. 3. We search for the position title as 'data scientist' and location as 'san francisco'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many java developers attend more than one universities?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_EDUCATION]->(e1:Education), (p)-[:HAS_EDUCATION]->(e2:Education) WHERE toLower(s.name) CONTAINS 'java' AND e1.university <> e2.university RETURN COUNT(DISTINCT p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where are most of pythonistas located?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) MATCH (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(s.name) CONTAINS 'python' WITH pos.location as location, COUNT(p) as num_pythonistas ORDER BY num_pythonistas DESC LIMIT 1 RETURN location, num_pythonistas"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Who went to most number of universities?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WITH p, COUNT(e.university) as num_universities ORDER BY num_universities DESC LIMIT 1 RETURN p, num_universities"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Do I have any expert on mainframes?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'mainframes' AND toLower(s.level) CONTAINS 'expert' RETURN COUNT(p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many are knowledgable on all of - java, python, javascript, security?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE (toLower(s.name) CONTAINS 'java' OR toLower(s.name) CONTAINS 'python' OR toLower(s.name) CONTAINS 'javascript' OR toLower(s.name) CONTAINS 'security') WITH p, COUNT(s) AS skill_count WHERE skill_count = 4 RETURN COUNT(p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where do most of them work at?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) RETURN c.name, COUNT(p) AS num_people ORDER BY num_people DESC LIMIT 1"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where did most of them study?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) RETURN e.university, COUNT(p) AS num_people ORDER BY num_people DESC LIMIT 1"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where does most marketing managers work?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'marketing manager' RETURN c.name, COUNT(p) AS num_people ORDER BY num_people DESC LIMIT 1"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Do I have anyone with expertise on Java and Cyber security?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s1:Skill), (p)-[:HAS_SKILL]->(s2:Skill) WHERE toLower(s1.name) CONTAINS 'java' AND toLower(s2.name) CONTAINS 'cyber security' RETURN p"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many Texas-based experts do I have on Java?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) MATCH (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(s.name) CONTAINS 'java' AND toLower(s.level) CONTAINS 'expert' AND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Which data scientist is based out of Texas?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'data scientist' AND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN p"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:I have to fill 10 Front end roles. Who are all I have based on ideal skillsets for a front end role?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) IN ['html', 'css', 'javascript', 'react', 'angular', 'vue'] WITH p, COUNT(s) AS skill_count ORDER BY skill_count DESC LIMIT 10 RETURN p"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Which skill is popular among people with bachelor degrees?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education), (p)-[:HAS_SKILL]->(s:Skill) WHERE toLower(e.degree) CONTAINS 'bachelor' WITH s, COUNT(p) AS person_count ORDER BY person_count DESC LIMIT 1 RETURN s.name, person_count"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a degree in computer science from Stanford University?", "output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'computer science' AND toLower(e.university) CONTAINS 'stanford' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree as 'computer science' and university as 'stanford'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a software engineer at Google?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'software engineer' AND toLower(c.name) CONTAINS 'google' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'software engineer' and company name as 'google'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of intermediate in Python?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'python' AND toLower(s.level) CONTAINS 'intermediate' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'python' and skill level as 'intermediate'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have held a position in New York City?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.location) CONTAINS 'new york city' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has location as a property. 3. We search for the position location as 'new york city'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a master's degree in data science?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'master' AND toLower(e.degree) CONTAINS 'data science' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'master' and 'data science'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a data analyst at Facebook?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'data analyst' AND toLower(c.name) CONTAINS 'facebook' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'data analyst' and company name as 'facebook'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of beginner in JavaScript?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'javascript' AND toLower(s.level) CONTAINS 'beginner' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'javascript' and skill level as 'beginner'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a bachelor's degree in electrical engineering?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.degree) CONTAINS 'electrical engineering' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'bachelor' and 'electrical engineering'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a project manager in London?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'project manager' AND toLower(pos.location) CONTAINS 'london' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has title and location as properties. 3. We search for the position title as 'project manager' and position location as 'london'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a PhD in physics from MIT?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'phd' AND toLower(e.degree) CONTAINS 'physics' AND toLower(e.university) CONTAINS 'mit' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree containing both 'phd' and 'physics' and university as 'mit'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a degree in Computer Science from Stanford University?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'computer science' AND toLower(e.university) CONTAINS 'stanford university' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree as 'computer science' and university as 'stanford university'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Software Engineer at Google?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'software engineer' AND toLower(c.name) CONTAINS 'google' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'software engineer' and company name as 'google'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of 'intermediate' in Python?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'python' AND toLower(s.level) CONTAINS 'intermediate' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'python' and skill level as 'intermediate'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a Master's degree in Data Science?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'master' AND toLower(e.degree) CONTAINS 'data science' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'master' and 'data science'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Data Analyst in New York?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'data analyst' AND toLower(pos.location) CONTAINS 'new york' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has title and location as properties. 3. We search for the position title as 'data analyst' and location as 'new york'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a PhD in Physics from MIT?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'phd' AND toLower(e.degree) CONTAINS 'physics' AND toLower(e.university) CONTAINS 'mit' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree containing both 'phd' and 'physics' and university as 'mit'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Product Manager at Amazon?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'product manager' AND toLower(c.name) CONTAINS 'amazon' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'product manager' and company name as 'amazon'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of 'beginner' in JavaScript?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'javascript' AND toLower(s.level) CONTAINS 'beginner' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'javascript' and skill level as 'beginner'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a Bachelor's degree in Mathematics?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.degree) CONTAINS 'mathematics' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'bachelor' and 'mathematics'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Data Scientist in San Francisco?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'data scientist' AND toLower(pos.location) CONTAINS 'san francisco' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has title and location as properties. 3. We search for the position title as 'data scientist' and location as 'san francisco'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many java developers attend more than one universities?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill), (p)-[:HAS_EDUCATION]->(e1:Education), (p)-[:HAS_EDUCATION]->(e2:Education) WHERE toLower(s.name) CONTAINS 'java' AND e1.university <> e2.university RETURN COUNT(DISTINCT p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where are most of pythonistas located?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) MATCH (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(s.name) CONTAINS 'python' WITH pos.location as location, COUNT(p) as num_pythonistas ORDER BY num_pythonistas DESC LIMIT 1 RETURN location, num_pythonistas"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Who went to most number of universities?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WITH p, COUNT(e.university) as num_universities ORDER BY num_universities DESC LIMIT 1 RETURN p, num_universities"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Do I have any expert on mainframes?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'mainframes' AND toLower(s.level) CONTAINS 'expert' RETURN COUNT(p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many are knowledgable on all of - java, python, javascript, security?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE (toLower(s.name) CONTAINS 'java' OR toLower(s.name) CONTAINS 'python' OR toLower(s.name) CONTAINS 'javascript' OR toLower(s.name) CONTAINS 'security') WITH p, COUNT(s) AS skill_count WHERE skill_count = 4 RETURN COUNT(p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where do most of them work at?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) RETURN c.name, COUNT(p) AS num_people ORDER BY num_people DESC LIMIT 1"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where did most of them study?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) RETURN e.university, COUNT(p) AS num_people ORDER BY num_people DESC LIMIT 1"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Where does most marketing managers work?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'marketing manager' RETURN c.name, COUNT(p) AS num_people ORDER BY num_people DESC LIMIT 1"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Do I have anyone with expertise on Java and Cyber security?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s1:Skill), (p)-[:HAS_SKILL]->(s2:Skill) WHERE toLower(s1.name) CONTAINS 'java' AND toLower(s2.name) CONTAINS 'cyber security' RETURN p"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many Texas-based experts do I have on Java?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) MATCH (p)-[:HAS_POSITION]->(pos:Position) WHERE toLower(s.name) CONTAINS 'java' AND toLower(s.level) CONTAINS 'expert' AND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Which data scientist is based out of Texas?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'data scientist' AND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN p"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:I have to fill 10 Front end roles. Who are all I have based on ideal skillsets for a front end role?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) IN ['html', 'css', 'javascript', 'react', 'angular', 'vue'] WITH p, COUNT(s) AS skill_count ORDER BY skill_count DESC LIMIT 10 RETURN p"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:Which skill is popular among people with bachelor degrees?", "output_text": "Answer: \n MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education), (p)-[:HAS_SKILL]->(s:Skill) WHERE toLower(e.degree) CONTAINS 'bachelor' WITH s, COUNT(p) AS person_count ORDER BY person_count DESC LIMIT 1 RETURN s.name, person_count"}
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a degree in computer science from Stanford University?", "output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'computer science' AND toLower(e.university) CONTAINS 'stanford' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree as 'computer science' and university as 'stanford'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a software engineer at Google?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'software engineer' AND toLower(c.name) CONTAINS 'google' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'software engineer' and company name as 'google'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of intermediate in Python?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'python' AND toLower(s.level) CONTAINS 'intermediate' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'python' and skill level as 'intermediate'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have held a position in New York City?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.location) CONTAINS 'new york city' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has location as a property. 3. We search for the position location as 'new york city'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a master's degree in data science?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'master' AND toLower(e.degree) CONTAINS 'data science' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'master' and 'data science'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a data analyst at Facebook?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'data analyst' AND toLower(c.name) CONTAINS 'facebook' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'data analyst' and company name as 'facebook'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of beginner in JavaScript?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'javascript' AND toLower(s.level) CONTAINS 'beginner' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'javascript' and skill level as 'beginner'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a bachelor's degree in electrical engineering?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.degree) CONTAINS 'electrical engineering' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'bachelor' and 'electrical engineering'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a project manager in London?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'project manager' AND toLower(pos.location) CONTAINS 'london' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has title and location as properties. 3. We search for the position title as 'project manager' and position location as 'london'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a PhD in physics from MIT?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'phd' AND toLower(e.degree) CONTAINS 'physics' AND toLower(e.university) CONTAINS 'mit' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree containing both 'phd' and 'physics' and university as 'mit'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a degree in Computer Science from Stanford University?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'computer science' AND toLower(e.university) CONTAINS 'stanford university' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree as 'computer science' and university as 'stanford university'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Software Engineer at Google?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'software engineer' AND toLower(c.name) CONTAINS 'google' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'software engineer' and company name as 'google'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of 'intermediate' in Python?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'python' AND toLower(s.level) CONTAINS 'intermediate' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'python' and skill level as 'intermediate'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a Master's degree in Data Science?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'master' AND toLower(e.degree) CONTAINS 'data science' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'master' and 'data science'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Data Analyst in New York?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'data analyst' AND toLower(pos.location) CONTAINS 'new york' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has title and location as properties. 3. We search for the position title as 'data analyst' and location as 'new york'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a PhD in Physics from MIT?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'phd' AND toLower(e.degree) CONTAINS 'physics' AND toLower(e.university) CONTAINS 'mit' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree and university as properties. 3. We search for the degree containing both 'phd' and 'physics' and university as 'mit'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Product Manager at Amazon?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position)-[:AT_COMPANY]->(c:Company) WHERE toLower(pos.title) CONTAINS 'product manager' AND toLower(c.name) CONTAINS 'amazon' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship and Position node is related to Company node via AT_COMPANY relationship. 2. From the schema, Position has title as a property and Company has name as a property. 3. We search for the position title as 'product manager' and company name as 'amazon'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a skill level of 'beginner' in JavaScript?","output_text": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(s.name) CONTAINS 'javascript' AND toLower(s.level) CONTAINS 'beginner' RETURN COUNT(p)\nReason: \n1. Person node is related to Skill node via HAS_SKILL relationship. 2. From the schema, Skill has name and level as properties. 3. We search for the skill name as 'javascript' and skill level as 'beginner'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have a Bachelor's degree in Mathematics?","output_text": "MATCH (p:Person)-[:HAS_EDUCATION]->(e:Education) WHERE toLower(e.degree) CONTAINS 'bachelor' AND toLower(e.degree) CONTAINS 'mathematics' RETURN COUNT(p)\nReason: \n1. Person node is related to Education node via HAS_EDUCATION relationship. 2. From the schema, Education has degree as a property. 3. We search for the degree containing both 'bachelor' and 'mathematics'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."},
{"input_text": "Context:\nYou are an expert Neo4j Cypher translator who understands the question in english and convert to Cypher strictly based on the Neo4j Schema provided and the instructions below:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Company name use `toLower(c.name) contains 'neo4j'`\n6. Candidate node is synonymous to Person.\nNow, use this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nSchema:\nNodes:\n    label:'Person',id:string,role:string,description:string //Person Node\n    label:'Position',id:string,title:string,location:string,startDate:string,endDate:string,url:string //Position Node\n    label:'Company',id:string,name:string //Company Node\n    label:'Skill',id:string,name:string,level:string //Skill Node\n    label:'Education',id:string,degree:string,university:string,graduation_date:string,score:string,url:string //Education Node\nRelationships:\n    (:Person)-[:HAS_POSITION]->(:Position)\n    (:Position)-[:AT_COMPANY]->(:Company)\n    (:Person)-[:HAS_SKILL]->(:Skill)\n    (:Person)-[:HAS_EDUCATION]->(:Education)\nOuput Format (Strict): //Only code as output. No other text\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE toLower(p.name) CONTAINS 'java' AND toLower(p.level) CONTAINS 'expert' RETURN COUNT(p) \n\nQuestion: How many Texas-based experts do I have on Delphi?\nAnswer:\nMATCH (p:Person)-[:HAS_SKILL]->(s:Skill) \nMATCH (p)-[:HAS_POSITION]->(pos:Position)\nWHERE toLower(s.name) CONTAINS 'delphi' AND toLower(s.level) CONTAINS 'expert' \nAND (toLower(pos.location) CONTAINS 'texas' OR toLower(pos.location) CONTAINS 'tx') RETURN COUNT(p)\n\nReason:\n1. As per schema definition of nodes & relationships above, Person node is related to Skill node via HAS_SKILL relationship.\n2. From the schema, Skill has name and levels as properties. Expertise can be checked using `level`\n3. Since Texas can be denoted as TX, we search for the position's location as either 'texas' or 'tx'\n4. Finally, we return the number of persons who match the input criteria using COUNT function\n\nQuestion:How many people have worked as a Data Scientist in San Francisco?","output_text": "MATCH (p:Person)-[:HAS_POSITION]->(pos:Position) WHERE toLower(pos.title) CONTAINS 'data scientist' AND toLower(pos.location) CONTAINS 'san francisco' RETURN COUNT(p)\nReason: \n1. Person node is related to Position node via HAS_POSITION relationship. 2. From the schema, Position has title and location as properties. 3. We search for the position title as 'data scientist' and location as 'san francisco'. 4. Finally, we return the number of persons who match the input criteria using COUNT function."}