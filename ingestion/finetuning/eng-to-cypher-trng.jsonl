{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which patient has the most number of symptoms?\n Answer: \n", "output_text": "MATCH (n:Person)-[:HAS_SYMPTOM]->(s:Symptom) return n.id,n.age, n.gender,count(s) as symptoms order by symptoms desc"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which disease affect most of my patients?\n Answer: \n", "output_text": "MATCH (d:Disease) RETURN d.name as disease, SIZE([(d)-[]-(p:Person) | p]) AS affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which of patients have cough?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s:Symptom) WHERE toLower(s.description) CONTAINS 'cough' RETURN p.id, p.age, p.location, p.gender"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: Which body part got affected in most of my patients?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_DISEASE]->(d:Disease)-[:AFFECTS]->(bs:BodySystem) RETURN bs.name as body_part, COUNT(p) as affected_patients ORDER BY affected_patients DESC LIMIT 1"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: How many of my patients suffer from both cough and weight loss?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s1:Symptom), (p)-[:HAS_SYMPTOM]->(s2:Symptom) WHERE toLower(s1.description) CONTAINS 'cough' AND toLower(s2.description) CONTAINS 'weight loss' RETURN COUNT(DISTINCT p) as patients_with_both_symptoms"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: When someone has cough and nausea, do they also lose weight?\n Answer: \n", "output_text": "MATCH (p:Person)-[:HAS_SYMPTOM]->(s1:Symptom), (p)-[:HAS_SYMPTOM]->(s2:Symptom), (p)-[:HAS_SYMPTOM]->(s3:Symptom) WHERE toLower(s1.description) CONTAINS 'cough' AND toLower(s2.description) CONTAINS 'nausea' AND toLower(s3.description) CONTAINS 'weight loss' RETURN COUNT(p) > 0 AS weight_loss_present"}
{"input_text": "context: Using this Neo4j schema and Reply ONLY in Cypher when it makes sense.\nHere are the instructions to follow:\n1. Use the Neo4j schema to generate cypher compatible ONLY for Neo4j Version 5\n2. Do not use EXISTS, SIZE keywords in the cypher.\n3. Use only Nodes and relationships mentioned in the schema while generating the response\n4. Reply ONLY in Cypher when it makes sense.\n5. Always do a case-insensitive and fuzzy search for any properties related search. Eg: to search for a Heart Disease use `toLower(d.name) contains 'heart disease'`\n6. Patient node is synonymous to Person\n\nSchema:\nNodes:\n    label:'Case',id:string,summary:string //Case Node\n    label:'Person',id:string,age:string,location:string,gender:string //Patient Node\n    label:'Symptom',id:string,description:string //Symptom Node\n    label:'Disease',id:string,name:string //Disease Node\n    label:'BodySystem',id:string,name:string //Node for Body Part affected Eg: Heart, lungs\n    label:'Diagnosis',id:string,name:string,description:string,when:string //Diagnostic Node\n    label:'Biological',id:string,name:string,description:string //Node for Results identified from Diagnosis\n\nRelationships:\n    (:Case)-[:FOR]->(Person)\n    (:Person)-[:HAS_SYMPTOM{when:string,frequency:string,span:string}]->(Symptom)\n    (:Person)-[:HAS_DISEASE{when:string}]->(:Disease)\n    (:Symptom)-[:SEEN_ON]->(:BodySystem)\n    (:Disease)-[:AFFECTS]->(:BodySystem)\n    (:Person)-[:HAS_DIAGNOSIS]->(:Diagnosis)\n    (:Diagnosis)-[:SHOWED]->(:Biological) \n question: How many of my patients are teenagers?\n Answer: \n", "output_text": "MATCH (p:Person) WHERE toInteger(p.age) >= 13 AND toInteger(p.age) <= 19 RETURN COUNT(p) as teenagers"}